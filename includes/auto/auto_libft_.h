/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   auto_libft_.h                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ezalos <marvin@42.fr>                      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2020/03/29 15:26:25 by ezalos            #+#    #+#             */
/*   Updated: 2020/03/29 15:26:25 by ezalos           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef AUTO_LIBFT__H
# define AUTO_LIBFT__H

double		cl(clock_t t);
t_time		*list_exchange(t_time **timee);
void		sort_list(t_time **timee);
void		print_elements(t_time *tmp, double total, int tab);
void		print_total(double total);
void		print_time(void);
t_time		*time_exe(const char *s);
int		print_unsigned_integer(t_printf *print, uintmax_t nb);
int		paste_int_in_printf(t_printf *print, char *str);
int		output_invisible_char(size_t fd, char *str, size_t size, int color);
int		output_string(t_printf *print);
int		paste_format_in_printf(t_printf *print);
int		we_just_found_a_percent(t_printf *print);
int		ft_printf(const char *format, ...);
void		reajust_sign(char *str);
void		reajust_hatg(t_printf *print, char *str);
int		add_minimum_width(t_printf *print, char **str);
int		add_precison(t_printf *print, char **str);
int		add_htag(t_printf *print, char **str);
int		add_sign(char **str);
int		add_space(t_printf *print, char **str);
void		reajust_p(char *str);
int		type_p(char **str, t_printf *print);
void		add_minimum_width_0(t_printf *print);
void		write_0(t_printf *print, char **str);
int		get_printf(t_printf *print, char **str, size_t content_size);
int		print_string(t_printf *print, char *str);
int		paste_char_in_printf(t_printf *print, char str);
int		color_reset(t_printf *print, const char **f, char *str);
int		color_get_rgb(t_printf *print, const char **f, char *str);
int		color_nb_with_prand_color(t_printf *print, const char **f, char *str);
int		color_rand_color_based_int_str(t_printf *print, const char **f,
		char *str);
int		color_gestion(t_printf *print, const char **f);
int		paste_float_in_printf(t_printf *print, char *str);
int		print_integer(t_printf *print, intmax_t nb);
char		*s_to_bin(unsigned char *str, int length);
char		*ft_strrev(char *str, size_t size);
char		*print_string_to_binary(unsigned char *converter, size_t size_thing);
int		print_binary(t_printf *print, void *bin);
char		*get_int_from_float(intmax_t ldb, char neg);
char		*get_decimal_from_float(t_arg *arg, long double ldb);
char		*round_move_nb(char *str, size_t len);
void		init_struct_arg(t_printf *print);
int		init_struct(t_printf *print, const char *format);
void		add_type(const char **f, t_printf *print);
void		check_arg(t_printf *print, const char **f);
int		paste_str_in_printf(t_printf *print, char *str);
int		parsing_integer(t_printf *print);
int		parsing_unsigned_integer(t_printf *print);
int		parsing_float(t_printf *print);
int		parsing(t_printf *print);
int		bonus_gestion(t_printf *print, const char **f);
int		type_oux(t_printf *print, char **str);
int		type_dic(t_printf *print, char **str);
int		type_empty(t_printf *print, char **str);
int		type_s(t_printf *print, char **str);
int		ajust_flags(t_printf *print, char **str);
int		print_character(t_printf *print, char str);
int		float_exception(t_printf *print, double ldb);
char		*round_float_str(char *str);
void		float_no_htag(t_printf *print, char *int_part, char *decimal_part);
void		neg_gestion(char *neg, long double *ldb);
int		print_float(t_printf *print, long double ldb);
void		check_flags(const char c, t_arg *arg);
int		get_value_of_star_or_nb(t_printf *print, const char **f, int *tmp);
char		*get_value_of_star_or_str(t_printf *print, const char **f, char **tmp);
void		check_min_or_pre2(t_printf *print, const char **f, int *tmp, int pres);
void		check_minimum_width_or_precision(t_printf *print, const char **f);
int		print_pointer(t_printf *print, void *ptr);
char		*ft_strndup(char *str, size_t n);
int		gnl(int fd, char **line);
int		ft_strappend(char **base, char *more);
char		*ft_strtrim_free(char *str);
int		ft_strstartwith(char *str, char *start);
int		ft_strendswith(char *str, char *ends);
size_t		ft_access_htable(size_t key);
size_t		**ft_htable_mem(void);
ssize_t		ft_hfunc(void *data, size_t size);
ssize_t		ft_unstore_htable(void *data, size_t size,
		ssize_t (*hf)(void *, size_t));
int		ft_get_file_in_htable(char *str);
ssize_t		ft_store_htable(void *data, size_t size,
		ssize_t (*hf)(void *, size_t));
char		vct_getchar_at(t_vector *vector, size_t index);
t_vector	*vct_new(size_t size);
int8_t		vct_pushstr(t_vector *vector, char *str);
int8_t		vct_addchar_at(t_vector *vector, char c, size_t index);
int8_t		vct_strjoin(t_vector *vector, char *str);
int8_t		vct_fill_before(t_vector *vector, char c, size_t size);
t_vector	*vct_join(t_vector *dest, t_vector *src);
size_t		vct_len(t_vector *vector);
int8_t		vct_addstr_at(t_vector *vector, char *str, size_t index);
char		*vct_getstr(t_vector *vector);
void		vct_del(t_vector **vector);
void		vct_replace_char_at(t_vector *vector, char c, size_t index);
int8_t		vct_fill_after(t_vector *vector, char c, size_t size);
t_vector	*vct_dup(t_vector *vector);
void		vct_pop_from(t_vector *vector, size_t len, size_t index);
t_vector	*vct_join_free(t_vector **dest, t_vector **src,
		int first_or_second_or_both);
t_vector	*vct_newstr(char *str);
void		vct_bzero(t_vector *vector);
void		vct_pop(t_vector *vector, size_t len);
int8_t		vct_increase_scale(t_vector *vector, size_t scale);
int8_t		vct_cat(t_vector *dest, t_vector *src);
ssize_t		vct_chr(t_vector *vector, char c);
int8_t		vct_addchar(t_vector *vector, char c);
int8_t		vct_replace_char(t_vector *vector, char c, char replace);
ssize_t		vct_chr_str(t_vector *vector, char *find);
void		*malloco(size_t size_content);
void		*nalloc(size_t size_content);
void		ft_burn_garbage(char *str);
void		ft_clean_garbage(void);
void		*cnalloc(const void *content, size_t size_content);
int		*switch_garbage(void);
void		**ft_garbage_collector(void);
void		ft_strdel_multi(size_t nb, ...);
void		ft_free_with_nalloc(void *elem);
void		ft_memdel(void **ap);
void		ft_del(void *content, size_t size);
void		ft_strdel(char **as);
void		*ft_memcpy(void *dest, const void *src, size_t n);
void		*ft_memmove(void *dest, const void *src, size_t n);
void		*ft_memccpy(void *dest, const void *src, int c, size_t n);
void		ft_bzero(void *s, size_t n);
void		ft_swap(void *one, void *two, size_t size);
void		*ft_memset(void *str, int c, size_t n);
void		*ft_memalloc(size_t size);
char		*ft_strnew(size_t size);
void		*ft_memchr(const void *s, int c, size_t n);
int		ft_memcmp(const void *s1, const void *s2, size_t n);
char		**ft_strsplit(char const *s, char c);
char		*ft_strjoin(char const *s1, char const *s2);
char		*ft_strrealloc(const char *src, size_t size);
char		*ft_strsub(char const *s, unsigned int start, size_t len);
char		*ft_strdup(const char *src);
char		*ft_strtrim(char const *s);
char		*ft_strjoin_multi(size_t nb, ...);
size_t		ft_strlen(const char *s);
size_t		ft_strnlen(const char *s, size_t size);
size_t		ft_strlcat(char *dst, const char *src, size_t size);
char		*ft_strcpy(char *dest, const char *src);
char		*ft_strcat(char *dest, const char *src);
char		*ft_strncat(char *dest, const char *src, size_t n);
char		*ft_strncpy(char *dest, const char *src, size_t n);
int		ft_strcmp(const char *s1, const char *s2);
int		ft_strnequ(char const *s1, char const *s2, size_t n);
int		ft_strequ(char const *s1, char const *s2);
int		ft_strncmp(const char *s1, const char *s2, size_t n);
void		ft_striter(char *s, void (*f)(char *));
void		ft_striteri(char *s, void (*f)(unsigned int, char *));
char		*ft_strmapi(char const *s, char (*f)(unsigned int, char));
void		ft_strclr(char *s);
char		*ft_strmap(char const *s, char (*f)(char));
int		ft_isprint(int c);
int		ft_isalpha(int c);
int		ft_tolower(int c);
int		ft_islower(int c);
int		ft_isupper(int c);
int		ft_isascii(int c);
int		ft_isalnum(int c);
int		ft_toupper(int c);
int		ft_isdigit(int c);
int		ft_char_srch(const char src, const char *dlt);
int		ft_match(char *s1, char *s2);
char		*ft_strstr(const char *meule_de_foin, const char *aiguille);
int		ft_nmatch(char *s1, char *s2);
char		*ft_strrchr(const char *s, int c);
char		*ft_strchr(const char *s, int c);
char		*ft_strnstr(const char *haystack, const char *needle, size_t len);
char		*ft_pstrnstr(const char *m, const char *a, size_t len);
ssize_t		ft_get_size_file(char *str);
void		ft_add_to_file(char *name, char *data);
size_t		ft_get_file(char *path, char **file);
int		ft_create_new_file(char *str);
char		*ft_read_file(int fd, int *size);
int		ft_get_tab_from_file(char *str, int **tab, int lines);
int		ft_ipart(float x);
float		ft_fpart(float x);
int		ft_round(float i);
float		ft_rfpart(float x);
int		ft_round_upper(float i);
int		*ft_nprime(int limite);
int		ft_fibonacci(int index);
void		ft_squick_sort(int **array, int low, int high);
void		ft_quick_sort(int **array, int low, int high, int *count);
intmax_t	ft_simple_random(intmax_t mn, intmax_t mx, intmax_t r, size_t l);
intmax_t	ft_rand(intmax_t max, intmax_t seed);
intmax_t	ft_random(intmax_t min, intmax_t max, intmax_t ran, size_t len);
intmax_t	ft_seed_gnl(intmax_t min, intmax_t max);
intmax_t	ft_seed_adress(intmax_t min, intmax_t max);
intmax_t	ft_seed_string(const char *str);
intmax_t	ft_seed_time(intmax_t min, intmax_t max);
float		ft_fsqrt(int nb, int limite);
int		ft_abs(int x);
intmax_t	ft_nb_in_range(intmax_t min, intmax_t max, intmax_t nb);
intmax_t	ft_power(int nb, int power);
int		ft_factorial(int nb);
intmax_t	ft_sum_to_nb(intmax_t nb);
int		ft_nb_char_to_int(char c);
int		ft_intlen(int n);
size_t		ft_u_nb_len(uintmax_t nb, size_t base);
int		ft_is_str_bigger_than_int(char *str);
int		ft_patoi(const char *str);
int		ft_atoi(const char *src);
char		*ft_itoa(int n);
char		*ft_nb_to_a(intmax_t n, size_t base);
size_t		ft_nb_len(intmax_t n, size_t base);
char		*ft_u_nb_to_a(uintmax_t n, size_t base);
int		update_gnl_struct(t_gnl *gnl, char **line);
int		get_line_2(t_gnl *gnl, char **line);
int		create_struct_for_fd(int fd, char **line, t_list *tmp);
int		ft_gnl(const int fd, char **line);
int		send_exceptions(char **line, t_list *gnl);
int		send_line(char **line, t_list *gnl);
int		save_file(t_list *gnl, char *buf, int read);
int		get_line(t_list *gnl, char **line);
int		get_next_line(const int fd, char **line);
int		ft_putstr_r0_fd(char const *s, int fd);
void		*ft_putstr_rnull(char const *s);
int		ft_putstr_r0(char const *s);
void		ft_putnbr(int n);
void		ft_putbnbr_str(int i, uintmax_t n, char *nb, size_t base);
size_t		ft_puttab(const char *s, size_t separation);
size_t		ft_puttab_len(size_t length, size_t separation, size_t n);
void		ft_putendl(char const *s);
void		ft_putstr(char const *s);
void		ft_putnstr(char const *s, size_t n);
void		ft_putchar(char c);
void		ft_putchar_fd(char c, int fd);
void		ft_putnbr_fd(int n, int fd);
void		ft_putstr_fd(char const *s, int fd);
void		ft_putendl_fd(char const *s, int fd);
size_t		ft_lst_count(t_list *lst, size_t i);
void		ft_lstdelone(t_list **alst, void (*del)(void *, size_t));
size_t		ft_lst_free(t_list **delete_me);
void		ft_lstdel(t_list **alst, void (*del)(void *, size_t));
void		ft_lstiter(t_list *lst, void (*f)(t_list *elem));
t_list		*ft_lstmap(t_list *lst, t_list *(*f)(t_list *elem));
t_list		*ft_lst_reach_end(t_list *alst);
t_list		*ft_lstfind_th(t_list *lst, size_t umpteenth);
void		ft_lstcutone(t_list **alst, void (*del)(void *, size_t));
void		ft_lstadd_start(t_list **alst, t_list *new);
void		ft_lstadd_here(t_list *alst, t_list *new);
void		ft_lstadd_end(t_list *alst, t_list *new);
void		ft_lstadd(t_list **alst, t_list *new, int position);
t_list		*ft_lstnew_ptr(void const *content, size_t content_size);
t_list		*ft_lstnew(void const *content, size_t content_size);
size_t		ft_tab_dir_clock(size_t dir);
size_t		ft_tab_dir_rclock(size_t dir);
size_t		ft_tab_dir_nclock(size_t dir, size_t move);
size_t		ft_tab_dir_reverse(size_t dir);
size_t		ft_tab_lendir(t_tab *tab, size_t dir);
size_t		ft_tabloop_lendir(t_tab *tab, size_t dir);
size_t		ft_tab_delete_row(t_tab *tab, size_t dir);
size_t		ft_tab_delete_row_len(t_tab *tab, size_t dir, size_t len);
void		ft_tabiter(t_tab *t, size_t d,
		int (*f)(t_tab *, size_t, int), size_t s);
size_t		ft_tabloop_itis(t_tab *tab, size_t dir);
t_tab		*ft_tab_reach_end(t_tab *tab, size_t dir);
t_tab		*ft_tab_access(t_tab *tab, int dir_y, int dir_x, int rot);
t_tab		*ft_tab_dirth(t_tab *tab, size_t dir, size_t umpteenth);
int		ft_tab_print_one_elmnt(t_tab *tmp, size_t lin,
		size_t col, int structh);
int		ft_tab_print_dir(t_tab *tab, size_t dir, int lin);
void		ft_tabadd(t_tab **tab, t_tab *new, size_t dir, int umpteenth);
t_tab		*ft_tab_cutone(t_tab *to_cut);
void		ft_tabadd_start(t_tab **alst, t_tab *new, size_t dir);
int		ft_tab_connect_dir(size_t d_a, t_tab *l_a, t_tab *l_b, size_t d_b);
void		ft_tabadd_end(t_tab *alst, t_tab *new, size_t dir);
int		ft_tab_cut_loop(t_tab *tab, size_t dir);
void		ft_tabadd_here(t_tab *alst, t_tab *new, size_t dir);
size_t		ft_tabloop_it(t_tab *tab, size_t dir);
void		ft_tab_connect_structs(t_tab *t_one, t_tab *t_two, size_t dir_one);
t_tab		*ft_tab_square_it(t_tab *tab, size_t dir);
t_tab		*ft_tabnew_rectangle(size_t x_axis, size_t y_axis, size_t x_dir);
t_tab		*ft_tabnew_dir(size_t len, size_t dir);
t_tab		*ft_tabnew_ptr(void const *content, size_t content_size);
void		ft_press_any_key(void);
void		ft_wait_pls(uintmax_t wait);
void		ft_progress(const char *name, intmax_t now, intmax_t max);
int		ft_place_cursor(size_t line, size_t column);
void		ft_print_address_color(intmax_t nb);
char		*ft_str_rgbcolor(char background, int red, int green, int blue);
int		ft_rgb_bcolor(int red, int green, int blue);
void		ft_putstr_color(char const *s, int r, int g, int b);
int		ft_rgb_color(int red, int green, int blue);

#endif
